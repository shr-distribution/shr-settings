#!/usr/bin/env python
import elementary
import ecore
import dbus, e_dbus
import os

from shr_settings_modules import shr_gsm, shr_device_timeouts,shr_pm, shr_bt, shr_wifi, shr_gprs, shr_usb, shr_clock, shr_profile, shr_services, shr_test, shr_gps, shr_sim, shr_battery, shr_currentprofile

class CategoryButton(elementary.Button):
    def set_modules(self, modules):
        self.modules = modules
    def get_modules(self):
        return self.modules



class ModulesWindow:
    def renderModules(self, modulesList, bus):
        print "idler"
        for mod in modulesList[2]:

            print "loading %s" % mod
            try:
                mod2 = mod(self.win2, bus)
                self.modList.append(mod2)

                if mod2.isEnabled():
                    cont = mod2.createView()

                    frame = elementary.Frame(self.win2)

                    frame.label_set(mod2.getName()+" settings")
                    self.box12.pack_end(frame)
                    frame.size_hint_align_set(-1.0, 0.0)
                    frame.show()

                    if cont != None:
                        frame.content_set(cont)
                        cont.show()
                    else:
                        print " error! module %s method createView() return's nothing!" % mod2
            except:
                print "module %s can't be loaded!" % mod
        self.loading.hide()
        return None

    def makeGui(self,  modulesList, bus):

        self.win2 = elementary.Window("settingsMods", elementary.ELM_WIN_BASIC)
        self.win2.title_set(modulesList[0])
        self.win2.destroy = self.destroy2
        
        #add background to module window
        bg = elementary.Background(self.win2)
        self.win2.resize_object_add(bg)
        bg.size_hint_weight_set(1.0, 1.0)
        bg.show()

        box02 = elementary.Box(self.win2)
        box02.size_hint_weight_set(1.0, 1.0)
        self.win2.resize_object_add(box02)
        box02.show()



    #    toolbar = elementary.Toolbar(win)
    #    box0.pack_start(toolbar)
    #    toolbar.show()

        sc2 = elementary.Scroller(self.win2)
        sc2.size_hint_weight_set(1.0, 1.0)
        sc2.size_hint_align_set(-1.0, -1.0)
        box02.pack_end(sc2)
        sc2.show()

        quitbt2 = elementary.Button(self.win2)
        quitbt2.clicked = self.destroy2
        quitbt2.label_set("Quit")
        quitbt2.size_hint_align_set(-1.0, 0.0)
        quitbt2.show()
        box02.pack_end(quitbt2)


        self.box12 = elementary.Box(self.win2)
        self.box12.size_hint_weight_set(1.0, -1.0)
        sc2.content_set(self.box12)
        self.box12.show()

        self.loading = elementary.Box(self.win2)
        loadingframe = elementary.Frame(self.win2)
        loadingframe.style_set("outdent_bottom")
        loadingframe2 = elementary.Frame(self.win2)
        loadingframe2.style_set("outdent_top")
        loadingframe2.size_hint_weight_set(0.0, 0.0)
        loadingframe2.size_hint_align_set(0.5, 0.5)
        loadinglabel = elementary.Label(self.win2)
        modulescount = len(modulesList[2])
        modulesform = ""
        if modulescount > 1:
            modulesform = "s"
        loadinglabel.label_set("Please wait...<br>Loading %(ile)d module%(s)s..." % {"ile":modulescount, "s":modulesform})

        loadingframe.content_set(loadingframe2)
        loadingframe2.content_set(loadinglabel)
        self.win2.resize_object_add(self.loading)
        self.loading.pack_start(loadingframe)
        loadinglabel.show()
        loadingframe.show()
        loadingframe2.show()
        self.loading.show()

        self.modList = []
        #DEBUG
        #for mod in modulesList[2]:
        #
        #    print "debug loading %s" % mod
        #    debugmod=mod(self.win2, bus)
        #    if debugmod.isEnabled():
        #        debugmod.createView()
        #END OF DEBUG
        ecore.idler_add(self.renderModules, modulesList, bus)
        self.win2.show()

    def destroy2(self,obj, event, *args, **kargs):
        self.win2.hide()
        for m in self.modList:
            try:
                m.stopUpdate()
            except:
                pass
        




class MainWindow:

    def destroy(self, obj, event, *args, **kargs):
        print "DEBUG: window destroy callback called! kabum!"
        elementary.exit()

    def displayModulesWin(self, obj,event):
        #odulesWindow:
        #def makeGui(self, dbus_system, modules):
        print "displayModulesWin 1"
        print "displayModulesWin 2"
        self.m.makeGui(  obj.get_modules(), self.dbus_system )
        print "displayModulesWin 3"

    def __init__(self):
        elementary.init()
        self.win = elementary.Window("settings", elementary.ELM_WIN_BASIC)
        self.win.title_set("Settings")
        self.win.destroy = self.destroy


        #dbus init:
        mainloop = e_dbus.DBusEcoreMainLoop()
        #dbus_session = dbus.SessionBus(mainloop=self.mainloop) - we don't need atm
        self.dbus_system = dbus.SystemBus(mainloop=mainloop)
       
        self.m = ModulesWindow()

        #add background to main window
        bg = elementary.Background(self.win)
        self.win.resize_object_add(bg)
        bg.size_hint_weight_set(1.0, 1.0)
        bg.show()

        # main container contains a scroller and the Quit button
        mainbox = elementary.Box(self.win)
        mainbox.size_hint_weight_set(1.0, 1.0)
        self.win.resize_object_add(mainbox)
        mainbox.show()

        # scroller that contains the table with buttons
        sc = elementary.Scroller(mainbox)
        sc.size_hint_weight_set(1.0, 1.0)
        sc.size_hint_align_set(-1.0, -1.0)
        mainbox.pack_end(sc)
        sc.show()

        # quit button
        quitbt = elementary.Button(mainbox)
        quitbt.clicked = self.destroy
        quitbt.label_set("Quit")
        quitbt.size_hint_align_set(-1.0, 0.0)
        quitbt.show()
        mainbox.pack_end(quitbt)

        # table containing category buttons
        cat_table = elementary.Table(sc)
        cat_table.size_hint_weight_set(1.0, 1.0)
        sc.content_set(cat_table)
        cat_table.show()

        #loading modules

        dirs = [    ["GSM","ico_gsm_32_32.png",                        [ shr_gsm.Gsm, shr_sim.Sim ] ],
                    ["Bluetooth","ico_bt_32_32.png",                   [ shr_bt.Bt ] ],
                    ["Internet","ico_internet_32_32.png",              [ shr_wifi.Wifi, shr_gprs.Gprs ] ],
                    ["Profiles","ico_profile_32_32.png",               [ shr_profile.Profile, shr_currentprofile.CurrentProfile ] ],
                    ["Date/time","ico_timeset_32_32.png",                  [ shr_clock.Clock ] ],
                    ["Power","ico_powermanager_32_32.png",  [ shr_battery.Battery, shr_pm.Pm , shr_device_timeouts.Timeouts ] ],
                    ["USB","ico_usb_32_32.png",                        [ shr_usb.Usb ] ],
                    ["Services","ico_initd_32_32.png",                 [ shr_services.Services ] ],
                    ["Others", "ico_others_32_32.png",                 [ shr_gps.Gps ] ],
                    ["Test", "",                                       [ shr_test.Test ] ]
            ]


        for (i,d) in enumerate(dirs):
            bt = CategoryButton(cat_table)
            bt.set_modules( d )

            bt.clicked = self.displayModulesWin
            bt.size_hint_weight_set(1.0, 1.0)
            bt.size_hint_align_set(-1.0, -1.0)
            bt.label_set( d[0] )
            bt.show()

            icon_paths = [ "data/icons/"+str(d[1]), "/usr/share/pixmaps/"+str(d[1])]
            for i_path in icon_paths:
                if os.path.exists(i_path):
                    ic = elementary.Icon(bt)
                    ic.file_set( i_path )
                    ic.scale_set(1, 1)
                    bt.icon_set(ic)
                    ic.show()
                    break

            (row, col) = divmod(i,2)
            cat_table.pack(bt,col,row,1,1)

        self.win.show()
        

if __name__ == "__main__":
    
    MainWindow()
    elementary.run()
    elementary.shutdown()

    
